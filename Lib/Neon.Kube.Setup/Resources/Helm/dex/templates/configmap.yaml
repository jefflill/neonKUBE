apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dex.configSecretName" . }}
  labels:
    {{- include "dex.labels" . | nindent 4 }}
data:
  config.yaml: |
    issuer: {{ .Values.config.issuer }}
    storage:
      type: {{ .Values.config.storage.type }}
      config:
        inCluster: {{ .Values.config.storage.config.inCluster }}
    web:
      http: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    frontend: 
      dir: /srv/dex/web
      issuer: SSO Login - {{ .Values.cluster.name }}
      theme: dark
    connectors:
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        host: {{ .Values.config.ldap.host }}
        insecureNoSSL: true
        insecureSkipVerify: true
        rootCA: /etc/certs/ca.crt
        bindDN: {{ .Values.config.ldap.bindDN }}
        bindPW: {{ .Values.secrets.ldap }}
        usernamePrompt: {{ .Values.config.ldap.usernamePrompt }}
        userSearch:
          baseDN: {{ .Values.config.ldap.userSearch.baseDN }}
          filter: "{{ .Values.config.ldap.userSearch.filter }}"
          username: {{ .Values.config.ldap.userSearch.username }}
          idAttr: {{ .Values.config.ldap.userSearch.idAttr }}
          emailAttr: {{ .Values.config.ldap.userSearch.emailAttr }}
          nameAttr: {{ .Values.config.ldap.userSearch.nameAttr }}
        groupSearch:
          baseDN: {{ .Values.config.ldap.groupSearch.baseDN }}
          filter: "{{ .Values.config.ldap.groupSearch.filter }}"
          userMatchers:
          {{- toYaml .Values.config.ldap.groupSearch.userMatchers | nindent 12 }}
          nameAttr: {{ .Values.config.ldap.groupSearch.nameAttr }}
    oauth2:
      skipApprovalScreen: true
    staticClients:
    - id: grafana
      redirectURIs:
      - 'https://{{ .Values.neonkube.clusterDomain.grafana }}.{{ .Values.cluster.domain }}/login/generic_oauth'
      name: 'Grafana'
      secret: "{{- .Values.secrets.grafana }}"
      trustedPeers:
        - kubernetes
        - harbor
        - minio
    - id: kubernetes
      redirectURIs:
      - 'https://{{ .Values.neonkube.clusterDomain.kubernetesDashboard }}.{{ .Values.cluster.domain }}/oauth2/callback'
      - 'https://{{ .Values.neonkube.clusterDomain.neonDashboard }}.{{ .Values.cluster.domain }}/oauth2/callback'
      - 'https://{{ .Values.neonkube.clusterDomain.kiali }}.{{ .Values.cluster.domain }}/oauth2/callback'
      - 'https://{{ .Values.cluster.domain }}/oauth2/callback'
      name: 'Kubernetes'
      secret: "{{- .Values.secrets.kubernetes }}"
      trustedPeers:
        - grafana
        - harbor
        - minio
    - id: harbor
      redirectURIs:
      - 'https://{{ .Values.neonkube.clusterDomain.harborRegistry }}.{{ .Values.cluster.domain }}/oauth_callback'
      name: 'Harbor'
      secret: "{{- .Values.secrets.harbor }}"
      trustedPeers:
        - grafana
        - kubernetes
        - minio
    - id: minio
      redirectURIs:
      - 'https://{{ .Values.neonkube.clusterDomain.minio }}.{{ .Values.cluster.domain }}/oauth_callback'
      name: 'Minio'
      secret: "{{- .Values.secrets.minio }}"
      trustedPeers:
        - grafana
        - kubernetes
        - harbor