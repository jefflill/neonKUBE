apiVersion: integreatly.org/v1alpha1
kind: Grafana
metadata:
  name: grafana
spec:
  ingress:
    enabled: False
  config:
    server:
      root_url: "https://{{ .Values.neonkube.clusterDomain.grafana }}.{{ .Values.cluster.domain }}"
    feature_toggles:
      enable: recordedQueries tempoSearch newNavigation persistNotifications serviceAccounts explore2Dashboard publicDashboards traceqlEditor traceToMetrics
    security:
      cookie_secure: true
      cookie_samesite: none
      allow_embedding: true
    log:
      mode: "console"
      level: "info"
    auth:
      oauth_auto_login: true
    auth.generic_oauth:
      api_url: >-
        https://{{ .Values.neonkube.clusterDomain.sso }}.{{ .Values.cluster.domain }}/userinfo
      auth_url: >-
        https://{{ .Values.neonkube.clusterDomain.sso }}.{{ .Values.cluster.domain }}/auth
      client_id: $__env{CLIENT_ID}
      client_secret: $__env{CLIENT_SECRET}
      enabled: true
      scopes: openid email profile groups offline_access audience:server:client_id:neon-sso
      token_url: >-
        https://{{ .Values.neonkube.clusterDomain.sso }}.{{ .Values.cluster.domain }}/token
      role_attribute_path: >-
        contains(groups[*], 'superadmin') && 'Admin' || contains(groups[*], 'admin') && 'Editor' || 'Viewer'
    database:
      type: postgres
      host: neon-system-db.neon-system.svc.cluster.local
      name: grafana
      user: neon_service
      password: $__env{DATABASE_PASSWORD}
    users:
      auto_assign_org: true
      auto_assign_org_id: "1"
      auto_assign_org_role: Viewer
    alerting:
      enabled: false
    unified_alerting:
      enabled: true
  service:
    name: "grafana"
    labels:
      app: "grafana"
      type: "grafana-service"
    type: ClusterIP
    ports:
      - name: grafana
        protocol: TCP
        port: 3001
        targetPort: grafana-http
  deployment:
    replicas: {{ .Values.replicas }}
    labels:
      app: grafana
    annotations:
      sidecar.istio.io/inject: "true"
      reloader.stakater.com/auto: "true"
    envFrom:
      - secretRef:
          name: grafana-secret
      - secretRef:
          name: grafana-env
    {{- if eq (include "nodeSelectorEnabled" .) "true" }}
    nodeSelector:
      {{- include "grafana.nodeSelector" . | nindent 6 }}
    {{- end }}
    priorityClassName: {{ .Values.priorityClassName }}
    {{- with .Values.tolerations }}
    tolerations:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: grafana
              topologyKey: kubernetes.io/hostname
  dashboardLabelSelector:
    - matchExpressions:
        - { key: app, operator: In, values: [ grafana ] }
  # initResources:
  #   # Optionally specify initResources
  #   limits:
  #     cpu: 1000m
  #     memory: 512Mi
  #   requests:
  #     cpu: 250m
  #     memory: 128Mi
  resources:
    # Optionally specify container resources
    limits:
      memory: {{ .Values.resources.limits.memory }}
    requests:
      memory: {{ .Values.resources.requests.memory }}
