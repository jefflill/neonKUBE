<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.WSL</name>
    </assembly>
    <members>
        <member name="T:Neon.WSL.NamespaceDoc">
            <summary>
            <b>INTERNAL USE ONLY:</b> This namespace includes WSL related utilities intended for internal use only
            at this time.
            </summary>
        </member>
        <member name="T:Neon.WSL.Wsl2Proxy">
            <summary>
            <b>INTERNAL USE ONLY:</b> Handles interactions with our neonKUBE WSL2 distribution
            running on the local Windows workstation.  Note that this is not intended to be 
            generally useful at this time.
            </summary>
            <remarks>
            <para>
            WSL2 distibutions are managed by the Microsoft <b>wsl.exe</b> command line
            tool.  This includes commands to import/export, register, and terminate WSL2
            Linux distributions as well as the ability to login and/or execute commands,
            </para>
            <para>
            <b>wsl.exe</b> seems to be primarily intended to be used by users
            performing interactive commands from within some sort of command shell like
            <b>cmd.exe</b>, Powershell, <b>cmdr.exe</b>, <b>ms-terminal</b>, etc.
            </para>
            <para>
            The <see cref="T:Neon.WSL.Wsl2Proxy"/> class wraps the <b>wsl.exe</b> tool such
            that Linux commands can be be invoked via code running on Windows.  We
            currently use this for managing WSL2 for a local neonDESKTOP cluster.
            </para>
            <para><b>Managing WSL2 Distros</b></para>
            <para>
            This class provides these <c>static</c> methods for managing distros:
            </para>
            <list type="table">
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.Import(System.String,System.String,System.String)"/></term>
                <description>
                Imports a WSL2 distro from a TAR file.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.Export(System.String,System.String)"/></term>
                <description>
                Exports a WSL2 distro to a TAR file.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.Terminate(System.String)"/></term>
                <description>
                Terminates the named WSL2 disto.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.Unregister(System.String)"/></term>
                <description>
                Unregisters the named WSL2 distribution.  Note that you must
                <see cref="M:Neon.WSL.Wsl2Proxy.Terminate(System.String)"/> it first when the distro is running.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.List(System.Boolean,System.Boolean)"/></term>
                <description>
                Lists registered distributions, optionally returning only the running
                distros.
                </description>
            </item>
            </list>
            <para><b>Executing Commands</b></para>
            <para>
            To start a WSL distro, you'll need to instantiate an instance via <c>new </c><see cref="M:Neon.WSL.Wsl2Proxy.#ctor(System.String,System.String)"/>,
            passing the registered name of the distribution and optionally the Linux user name (defaults to <b>root</b>).  By default,
            the constructor logs into the distro using specified user name.
            </para>
            <para>
            This class provides several methods for executing commands within the distro:
            </para>
            <list type="table">
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.Execute(System.String,System.Object[])"/></term>
                <description>
                Executes a command as the current user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.ExecuteAs(System.String,System.String,System.Object[])"/></term>
                <description>
                Executes a command as a specific user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.ExecuteScript(System.String)"/></term>
                <description>
                Executes a script as the current user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.ExecuteScriptAs(System.String,System.String)"/></term>
                <description>
                Executes a script as a specific user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.SudoExecute(System.String,System.Object[])"/></term>
                <description>
                <b>sudo</b> executes a command as the current user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.SudoExecuteAs(System.String,System.String,System.Object[])"/></term>
                <description>
                <b>sudo</b> executes a command as a specific user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.SudoExecuteScript(System.String)"/></term>
                <description>
                <b>sudo</b> executes a script as the current user.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.SudoExecuteScriptAs(System.String,System.String)"/></term>
                <description>
                <b>sudo</b> executes a script as the current user.
                </description>
            </item>
            </list>
            <note>
            <b>IMPORTANT:</b> Do not depend on the executed commands sharing the same environment variables.
            Also, don't depend on the Linux <b>login</b> having been started.
            </note>
            <para><b>Managing Files</b></para>
            <para>
            WSL2 distro file management is pretty easy because Windows mounts its file system at <b>/mnt/DRIVE-LETTER/...</b> within the
            distro so Linux code can access them and the distro files are mounted on Windows at <b>//wsl$/DISTRO-NAME/...</b>.
            </para>
            <list type="table">
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.ToLinuxPath(System.String)"/></term>
                <description>
                Maps a host Windows file system path to the equivalent path within the Linux distro.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.ToWindowsPath(System.String)"/></term>
                <description>
                Maps a Linux distro file system path to the equivalent path on the Windows host.
                </description>
            </item>
            <item>
                <term><see cref="M:Neon.WSL.Wsl2Proxy.UploadFile(System.String,System.String,System.String,System.String,System.Boolean)"/></term>
                <description>
                Uploads a file from the Windows host to the distro, optionally setting the
                owner and permissions as well as optionally converting Windows style line 
                endings (\r\n) to Linux (\n);
                </description>
            </item>
            </list>
            <note>
            These file methods work when <see cref="T:Neon.WSL.Wsl2Proxy"/> instance regardless of whether
            the instance is logged into the distro or not.
            </note>
            </remarks>
        </member>
        <member name="F:Neon.WSL.Wsl2Proxy.RootUser">
            <summary>
            The name of the root Linux user.
            </summary>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.IsWsl2Enabled">
            <summary>
            Returns <c>true</c> if WSL2 is enabled on the local Windows workstation.
            </summary>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.List(System.Boolean,System.Boolean)">
            <summary>
            Lists the names of the installed WSL2 distributions, optionally limiting
            this to the running distributions.
            </summary>
            <param name="runningOnly">Optionally return just the running distribitions.</param>
            <param name="keepDefault">Optionally retain the <b>" (Default)"</b> substring identifying the default repo.</param>
            <returns>The list of WSL2 distributions.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.GetDefault">
            <summary>
            Returns the name of the default WSL2 distribution, if any.
            </summary>
            <returns>The name of the default distribution or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Exists(System.String)">
            <summary>
            Checks to see if a named distribution exists.
            </summary>
            <param name="name">The distribution name.</param>
            <returns><c>true</c> if the distribution exists.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Import(System.String,System.String,System.String)">
            <summary>
            Imports a distribution from a TAR file.
            </summary>
            <param name="name">The new distribution's name.</param>
            <param name="tarPath">Path to the distribution input TAR file.</param>
            <param name="targetFolder">Path to the folder where the distribution image will be created.</param>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Export(System.String,System.String)">
            <summary>
            Exports a named distribution to a TAR file.
            </summary>
            <param name="name">The new distribution's name.</param>
            <param name="tarPath">Path to the distribution output TAR file.</param>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Terminate(System.String)">
            <summary>
            Terminates the named distribution if it exists and is running.
            </summary>
            <param name="name">Identifies the target WSL2 distribution.</param>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Unregister(System.String)">
            <summary>
            Terminates the named distribution (if it exists ans is running) and 
            then unregisters it with WSL2 effectively removing it.
            </summary>
            <param name="name">Identifies the target WSL2 distribution.</param>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.#ctor(System.String,System.String)">
            <summary>
            Constructs a proxy connected to a specific WSL2 distribution, starting the
            distribution by default of it's not already running.
            </summary>
            <param name="name">Identifies the target WSL2 distribution.</param>
            <param name="user">Optionally connect as a non-root user.</param>
            <remarks>
            The <paramref name="user"/> passed will become the default user for subsequent
            proxy operations.  This may be overridden by for specific operations by specifying 
            a different user in the call.
            </remarks>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.Name">
            <summary>
            Returns the distribution's name.
            </summary>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.User">
            <summary>
            Sppecifies the distribution user account to use for operations.  This will be
            initialized to the user passed to the constructor but may be changed afterwards
            to perform operations under other accounts.
            </summary>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.IsRunning">
            <summary>
            Determines whether the distribution is running.
            </summary>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.OSRelease">
            <summary>
            Returns a dictionary with the properties loaded from the <b>/etc/os-release</b> file
            on the distribution.
            </summary>
            <remarks>
            <para>
            The contents will look something like:
            </para>
            <code>
            NAME=Ubuntu
            VERSION=20.04.1 LTS (Focal Fossa)
            ID=ubuntu
            ID_LIKE=debian
            PRETTY_NAME=Ubuntu 20.04.1 LTS
            VERSION_ID=20.04
            HOME_URL=https://www.ubuntu.com/
            SUPPORT_URL=https://help.ubuntu.com/
            BUG_REPORT_URL=https://bugs.launchpad.net/ubuntu/
            PRIVACY_POLICY_URL=https://www.ubuntu.com/legal/terms-and-policies/privacy-policy
            VERSION_CODENAME=focal
            UBUNTU_CODENAME=focal
            </code>
            </remarks>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.IsDebian">
            <summary>
            Returns <c>true</c> for Debian/Ubuntu based distributions.
            </summary>
        </member>
        <member name="P:Neon.WSL.Wsl2Proxy.TempFolder">
            <summary>
            Optionally overrides the default user temp folder.  This is currently
            used by unit tests to verify that the class still works when a user
            has spaces in their Windows username which means that their temp
            folder path will also include spaces.
            </summary>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.IsPortListening(System.Int32)">
            <summary>
            Determines whether a WSL2 IPv4 port is currently listening for connections.
            </summary>
            <param name="port">The port number.</param>
            <returns><c>true</c> if the port is available.</returns>
            <remarks>
            This is useful for ensuring that another distro hasn't started listening
            on a port that's going to conflict with this distro.  This can happen 
            because all WSL2 distros share the same network namespace.  This can also
            happen when a Windows process is listening on the port.
            </remarks>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Terminate">
            <summary>
            Terminates the distribution if it's running.
            </summary>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.Execute(System.String,System.Object[])">
            <summary>
            <para>
            Executes a program within the distribution as the current user.
            </para>
            <note>
            The program will be executed within the current login session
            if there is one.
            </note>
            </summary>
            <param name="path">The program path.</param>
            <param name="args">Optional program arguments.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.ExecuteAs(System.String,System.String,System.Object[])">
            <summary>
            Executes a program within the distribution as a specific user.
            </summary>
            <param name="user">The user.</param>
            <param name="path">The program path.</param>
            <param name="args">Optional program arguments.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.SudoExecute(System.String,System.Object[])">
            <summary>
            <para>
            Executes a program within the distribution as the current user under SUDO.
            </para>
            <note>
            The program will be executed within the current login session
            if there is one.
            </note>
            </summary>
            <param name="path">The program path.</param>
            <param name="args">Optional program arguments.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.SudoExecuteAs(System.String,System.String,System.Object[])">
            <summary>
            Executes a program within the distribution as a specifc user under SUDO.
            </summary>
            <param name="path">The program path.</param>
            <param name="user">The user.</param>
            <param name="args">Optional pprogram arguments.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.ExecuteScript(System.String)">
            <summary>
            <para>
            Executes a bash script on the distribution as the current user.
            </para>
            <note>
            The script will be executed within the current login session
            if there is one.
            </note>
            </summary>
            <param name="script">The script text.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.ExecuteScriptAs(System.String,System.String)">
            <summary>
            Executes a bash script on the distribution as a specific user.
            </summary>
            <param name="user">The user.</param>
            <param name="script">The script text.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.SudoExecuteScript(System.String)">
            <summary>
            <para>
            Executes a bash script as SUDO on the distribution as the current user.
            </para>
            <note>
            The script will be executed within the current login session
            if there is one.
            </note>
            </summary>
            <param name="script">The script text.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.SudoExecuteScriptAs(System.String,System.String)">
            <summary>
            Executes a bash script as SUDO on the distribution as a specific user.
            </summary>
            <param name="user">The user.</param>
            <param name="script">The script text.</param>
            <returns>An <see cref="T:Neon.Common.ExecuteResponse"/> with the command results.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.ToWindowsPath(System.String)">
            <summary>
            Maps a fully qualified filesystem path within the Linux distribution
            to the corresponding Windows filesystem path on the host machine.
            </summary>
            <param name="linuxPath">The fully qualified internal Linux path.</param>
            <returns>The corresponding Linux path.</returns>
            <remarks>
            <note>
            This assumes that the internal Linux path includes only characters
            supported by Windows.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.ToLinuxPath(System.String)">
            <summary>
            Maps a fully qualified Windows host filesystem path to the corresponding
            path within the Linux distribution.
            </summary>
            <param name="windowsPath">The fully qualified host Windows path.</param>
            <returns>The corresponding Windows host path.</returns>
        </member>
        <member name="M:Neon.WSL.Wsl2Proxy.UploadFile(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a text file at the specifid path within the distribution.  The file will
            be created with the current <see cref="P:Neon.WSL.Wsl2Proxy.User"/> as the owner by default by this
            can be overridden.
            </summary>
            <param name="path">The target path.</param>
            <param name="text">The text to be written.</param>
            <param name="owner">Optionally overrides the current user when setting the file owner.</param>
            <param name="permissions">Optionally specifies the linux file permissions.</param>
            <param name="toLinuxText">Optionally convertes conversion of Windows (CRLF) line endings to the Linux standard (LF).</param>
        </member>
    </members>
</doc>
